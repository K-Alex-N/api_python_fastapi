services:

  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: always

  mongo-express:
    image: mongo-express:1.0.2-20-alpine3.19
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: pass
    depends_on:
      - mongo
    restart: always

  api:
    build: app
    ports:
      - "8000:8000"
    volumes:
      - app_data:/app
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://api:8000/health" ]
      interval: 2s
      timeout: 2s
      start_period: 2s
    depends_on:
      - mongo
    restart: always
    environment:
      MONGO_HOST: mongo

  prometheus:
    image: prom/prometheus:v3.5.0-rc.0
    volumes:
      - ./infra/prometheus/:/etc/prometheus/ # Здесь будет наш prometheus.yml
      - prometheus_data:/prometheus # Для хранения временных данных
    command: --config.file=/etc/prometheus/prometheus.yml --web.enable-remote-write-receiver
    ports:
      - "9090:9090"
    depends_on:
      - api # мб даже хэлфчек поставить

  grafana:
    image: grafana/grafana:12.0.2-ubuntu
    volumes:
#      - grafana_data:/var/lib/grafana # Для хранения дашбордов и настроек
      - ./infra/grafana/dashboards:/etc/grafana/dashboards
      - ./infra/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus


# тесты
#
#  locust_master:
#    build: tests/performance
#    command: --master --host http://api:8000
#    ports:
#      - "8089:8089"
#    depends_on:
#      api:
#        condition: service_healthy
#
#  locust_worker:
#    build: tests/performance
#    command: --worker --master-host locust_master
#    deploy:
#      replicas: 3
#    depends_on:
#      - locust_master

#  tests_api:
#    build: tests/api
#    environment:
#      - APP_HOST=api
#    volumes:
#      - allure-results:/test_api/allure-results
#      - app_data:/app
#    depends_on:
#      api:
#        condition: service_healthy
#
#  tests_ui:
#    build: tests/ui/sync
#    environment:
#      - HEADLESS=True
#      - SLOW_MO=0
#    volumes:
#      - allure-results:/test_ui/allure-results
#
#  tests_ui_async:
#    build: tests/ui/async
#    environment:
#      - HEADLESS=True
#      - SLOW_MO=0
#    volumes:
#      - allure-results:/test_ui/allure-results
#
#  allure: # http://localhost:5050/allure-docker-service/latest-report
#    image: frankescobar/allure-docker-service:2.27.0
#    ports:
#      - "5050:5050"
#    volumes:
#      - allure-results:/app/allure-results

volumes:
  mongo_data:
  app_data:
  prometheus_data:
  grafana_data:
  allure-results:



